# MegaMind MCP Server - Production Environment Configuration
# Phase 3 Containerization - Production Deployment

# ====================================================================
# DATABASE CONFIGURATION - PRODUCTION
# ====================================================================

# MySQL Configuration (Use strong passwords in production)
MYSQL_ROOT_PASSWORD=CHANGE_ME_PRODUCTION_ROOT_PASSWORD
MEGAMIND_DB_NAME=megamind_database
MEGAMIND_DB_USER=megamind_user
MEGAMIND_DB_PASSWORD=CHANGE_ME_PRODUCTION_DB_PASSWORD

# ====================================================================
# NETWORK BINDING - PRODUCTION
# ====================================================================

# Database Server (Internal network only)
MYSQL_BIND_IP=10.255.250.22
MYSQL_PORT=3309

# Redis Cache (Internal network only)
REDIS_BIND_IP=10.255.250.22
REDIS_PORT=6379

# HTTP MCP Server (Public facing)
HTTP_BIND_IP=0.0.0.0
HTTP_PORT=8080

# ====================================================================
# MCP SERVER CONFIGURATION - PRODUCTION
# ====================================================================

# Realm Management
MCP_DEFAULT_REALM=PROJECT
MCP_REALM_FACTORY=dynamic
MCP_ENHANCED_MONITORING=true

# Performance Tuning - Production Scale
CONNECTION_POOL_SIZE=50
EMBEDDING_CACHE_SIZE=2000
EMBEDDING_DEVICE=cpu
EMBEDDING_BATCH_SIZE=100

# Logging Configuration
MEGAMIND_LOG_LEVEL=INFO
MEGAMIND_DEBUG=false

# ====================================================================
# DEPLOYMENT PROFILES - PRODUCTION
# ====================================================================

# Enable production features
COMPOSE_PROFILES=production

# ====================================================================
# PRODUCTION DEPLOYMENT NOTES
# ====================================================================

# 1. Update passwords before deployment
# 2. Configure SSL certificates for HTTPS
# 3. Set up log rotation and monitoring
# 4. Configure backup strategies for database volumes
# 5. Review and update resource limits in docker-compose.yml
# 6. Set up reverse proxy with rate limiting
# 7. Configure firewall rules for network security