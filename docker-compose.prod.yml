# MegaMind Context Database - Production Docker Compose
# Complete semantic search system with realm-aware architecture and performance optimization
version: '3.8'

services:
  # MySQL Database with optimized configuration for semantic search
  megamind-mysql:
    image: mysql:8.0
    container_name: megamind-mysql-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-megamind_root_pass_secure}
      MYSQL_DATABASE: megamind_database
      MYSQL_USER: megamind_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-megamind_secure_pass}
    volumes:
      - megamind_db_data:/var/lib/mysql
      - ./database/mysql-config.cnf:/etc/mysql/conf.d/megamind.cnf:ro
    ports:
      - "${DB_HOST_IP:-127.0.0.1}:${DB_HOST_PORT:-3309}:3306"
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - megamind-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "megamind_user", "-p${MYSQL_PASSWORD:-megamind_secure_pass}"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis for caching and session management
  megamind-redis:
    image: redis:7-alpine
    container_name: megamind-redis-prod
    ports:
      - "${REDIS_HOST_IP:-127.0.0.1}:${REDIS_HOST_PORT:-6379}:6379"
    volumes:
      - megamind_redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - megamind-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 3
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # MegaMind MCP Server with complete semantic search system
  megamind-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: megamind-context-db:4.0.0
    container_name: megamind-mcp-server-prod
    environment:
      # Database configuration
      MEGAMIND_DB_HOST: megamind-mysql
      MEGAMIND_DB_PORT: 3306
      MEGAMIND_DB_NAME: megamind_database
      MEGAMIND_DB_USER: megamind_user
      MEGAMIND_DB_PASSWORD: ${MYSQL_PASSWORD:-megamind_secure_pass}
      
      # Redis configuration
      REDIS_URL: redis://megamind-redis:6379/3
      
      # MCP Server configuration
      MEGAMIND_MCP_SERVER_PORT: 8002
      CONNECTION_POOL_SIZE: 20
      
      # Realm configuration
      MEGAMIND_PROJECT_REALM: ${PROJECT_REALM:-PROJ_ECOMMERCE}
      MEGAMIND_PROJECT_NAME: ${PROJECT_NAME:-E-Commerce Platform}
      MEGAMIND_DEFAULT_TARGET: PROJECT
      
      # Semantic search configuration
      EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
      EMBEDDING_DEVICE: cpu
      EMBEDDING_BATCH_SIZE: 50
      EMBEDDING_CACHE_SIZE: 2000
      EMBEDDING_CACHE_TTL: 7200
      SEMANTIC_SEARCH_THRESHOLD: 0.7
      
      # Dual-realm search configuration
      REALM_PRIORITY_PROJECT: 1.2
      REALM_PRIORITY_GLOBAL: 1.0
      CROSS_REALM_SEARCH_ENABLED: true
      
      # Performance optimization
      ASYNC_EMBEDDING_ENABLED: true
      ASYNC_MAX_WORKERS: 4
      ASYNC_BATCH_SIZE: 20
      
      # Logging and monitoring
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENABLE_PERFORMANCE_MONITORING: true
      ENABLE_CACHE_STATISTICS: true
    depends_on:
      megamind-mysql:
        condition: service_healthy
      megamind-redis:
        condition: service_healthy
    ports:
      - "${MCP_HOST_IP:-127.0.0.1}:${MCP_HOST_PORT:-8002}:8002"
    volumes:
      - megamind_mcp_data:/app/data
      - megamind_mcp_logs:/app/logs
      - megamind_mcp_cache:/app/cache
    restart: unless-stopped
    networks:
      - megamind-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health', timeout=5)"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Optional: Monitoring and analytics dashboard
  megamind-dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    image: megamind-dashboard:1.0.0
    container_name: megamind-dashboard-prod
    environment:
      MEGAMIND_DB_HOST: megamind-mysql
      MEGAMIND_DB_PORT: 3306
      MEGAMIND_DB_NAME: megamind_database
      MEGAMIND_DB_USER: megamind_user
      MEGAMIND_DB_PASSWORD: ${MYSQL_PASSWORD:-megamind_secure_pass}
      REDIS_URL: redis://megamind-redis:6379/4
      DASHBOARD_PORT: 8080
    depends_on:
      megamind-mysql:
        condition: service_healthy
      megamind-redis:
        condition: service_healthy
    ports:
      - "${DASHBOARD_HOST_IP:-127.0.0.1}:${DASHBOARD_HOST_PORT:-8080}:8080"
    restart: unless-stopped
    networks:
      - megamind-network
    profiles:
      - dashboard
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  megamind_db_data:
  
  megamind_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}
  
  megamind_mcp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MCP_DATA_PATH:-./data/mcp}
  
  megamind_mcp_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MCP_LOGS_PATH:-./logs}
  
  megamind_mcp_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MCP_CACHE_PATH:-./cache}

networks:
  megamind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16